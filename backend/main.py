"""
API FastAPI - Endpoint principal /calculate

FLUXO:
1. Recebe dados do frontend (conforme schema_input.json)
2. Valida a data de corre√ß√£o e busca SELIC se necess√°rio
3. Escreve dados na planilha Excel (aba RESUMO)
4. Executa app.calculate() via xlwings
5. L√™ as tabelas vermelhas (linhas 21-104, colunas A-F e AB)
6. Salva input + output no SQLite
7. Retorna JSON com id + resultados (conforme schema_output.json)

DECIS√ïES T√âCNICAS:
- FastAPI para API moderna e r√°pida
- CORS habilitado para desenvolvimento local
- Valida√ß√£o autom√°tica via Pydantic
- Context manager para garantir fechamento do Excel
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Optional, Any
from datetime import datetime
from pathlib import Path
import os
import sys

# Adicionar o diret√≥rio backend ao path
sys.path.insert(0, str(Path(__file__).parent))

from database import init_database
from services.excel_runner import ExcelRunner
from services.selic_api import SelicAPI
from services.selic_updater import SelicUpdater


# Configura√ß√£o de caminhos
BASE_DIR = Path(__file__).parent.parent
EXCEL_PATH = os.getenv("EXCEL_FILE_PATH", str(BASE_DIR / "data" / "planilhamae.xlsx"))
MAPA_CELULAS_PATH = str(BASE_DIR / "data" / "mapa_celulas.json")
DATABASE_PATH = os.getenv("DATABASE_URL", str(BASE_DIR / "data" / "results.db")).replace("sqlite:///", "")
SELIC_CACHE_PATH = str(BASE_DIR / "data" / "selic_cache.json")


# Modelos Pydantic (baseados nos schemas)
class CalculateInput(BaseModel):
    munic√≠pio: str = Field(..., description="Nome do munic√≠pio")
    ajuizamento: str = Field(..., description="Data de ajuizamento")
    cita√ß√£o: str = Field(..., description="Data de cita√ß√£o")
    in√≠cio_c√°lculo: str = Field(..., description="Data de in√≠cio do c√°lculo")
    final_c√°lculo: str = Field(..., description="Data final do c√°lculo")
    honor√°rios_s_valor_da_condena√ß√£o: float = Field(..., description="Percentual de honor√°rios")
    honor√°rios_em_valor_fixo: float = Field(..., description="Valor fixo de honor√°rios")
    des√°gio_a_aplicar_sobre_o_principal: float = Field(..., description="Percentual de des√°gio no principal")
    des√°gio_em_a_aplicar_em_honor√°rios: float = Field(..., description="Percentual de des√°gio em honor√°rios")
    corre√ß√£o_at√©: str = Field(..., description="Data de corre√ß√£o")


class TableBlock(BaseModel):
    titulo: str
    header: List[str]
    rows: List[List[Any]]
    total: Optional[List[Any]] = None


class CalculateResult(BaseModel):
    id: str
    created_at: str
    correcao_ate: str
    results_base: List[TableBlock]  # Resultados fixos da planilha (01/01/2025)
    results_atualizados: Optional[List[TableBlock]] = None  # Resultados com SELIC aplicada (se data > 01/01/2025)


# Inicializa√ß√£o do FastAPI
app = FastAPI(
    title="ServFaz MVP - Excel Calculator API",
    description="API que usa Excel como motor de c√°lculo para processos jur√≠dicos",
    version="1.0.0"
)

# CORS (permitir requisi√ß√µes do frontend)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inicializar banco de dados
storage = init_database(DATABASE_PATH)
selic_api = SelicAPI(SELIC_CACHE_PATH)
selic_updater = SelicUpdater(SELIC_CACHE_PATH)


@app.get("/")
def root():
    """Endpoint de health check."""
    return {
        "status": "online",
        "service": "ServFaz MVP",
        "excel_path": EXCEL_PATH,
        "database_path": DATABASE_PATH
    }


@app.post("/calculate", response_model=CalculateResult)
def calculate(input_data: CalculateInput):
    """
    Endpoint principal de c√°lculo.
    
    1. Recebe dados do formul√°rio
    2. Valida SELIC para a data de corre√ß√£o
    3. Escreve na planilha e executa c√°lculo
    4. L√™ resultados das tabelas vermelhas
    5. Salva no banco e retorna JSON
    """
    try:
        # 1. Validar e garantir dados SELIC
        print(f"üìÖ Validando SELIC para: {input_data.corre√ß√£o_at√©}")
        try:
            selic_value = selic_api.ensure_selic(input_data.corre√ß√£o_at√©)
            if selic_value:
                print(f"SELIC encontrada: {selic_value}%")
        except Exception as selic_error:
            print(f"‚ö†Ô∏è Aviso SELIC: {str(selic_error)}")
            # Continuar mesmo sem SELIC (planilha pode ter dados suficientes)
        
        # 2. Executar c√°lculo no Excel
        print(f"Abrindo Excel: {EXCEL_PATH}")
        
        with ExcelRunner(EXCEL_PATH, MAPA_CELULAS_PATH) as runner:
            # Escrever inputs
            print("‚úèÔ∏è Escrevendo dados na planilha...")
            runner.write_inputs(input_data.dict())
            
            # Calcular
            print("Executando c√°lculo...")
            runner.calculate()
            
            # Ler resultados
            print("üìñ Lendo resultados das tabelas...")
            results = runner.read_results()
        
        print(f"{len(results)} blocos de tabela lidos com sucesso")
        
        # 3. Aplicar atualiza√ß√£o SELIC (se data > 01/01/2025)
        results_atualizados = None
        if selic_updater.precisa_atualizacao(input_data.corre√ß√£o_at√©):
            print(f"Aplicando atualiza√ß√£o SELIC para {input_data.corre√ß√£o_at√©}...")
            results_atualizados = selic_updater.atualizar_resultados(results, input_data.corre√ß√£o_at√©)
            print(f"Resultados atualizados com SELIC gerados")
        else:
            print(f"Data de corre√ß√£o ‚â§ 01/01/2025. Sem atualiza√ß√£o SELIC.")
        
        # 4. Preparar resposta
        created_at = datetime.now().isoformat()
        
        output_data = {
            "results_base": results,
            "results_atualizados": results_atualizados,
            "correcao_ate": input_data.corre√ß√£o_at√©
        }
        
        # 5. Salvar no banco
        print("üíæ Salvando no banco de dados...")
        result_id = storage.save_result(
            input_data=input_data.dict(),
            output_data=output_data
        )
        
        # 6. Retornar resposta
        response = {
            "id": result_id,
            "created_at": created_at,
            "correcao_ate": input_data.corre√ß√£o_at√©,
            "results_base": results,
            "results_atualizados": results_atualizados
        }
        
        print(f"üéâ C√°lculo conclu√≠do! ID: {result_id}")
        
        return response
    
    except FileNotFoundError:
        raise HTTPException(
            status_code=500,
            detail=f"Planilha n√£o encontrada: {EXCEL_PATH}"
        )
    except Exception as e:
        print(f"Erro no c√°lculo: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao processar c√°lculo: {str(e)}"
        )


@app.get("/results/{result_id}")
def get_result(result_id: str):
    """
    Recupera um resultado espec√≠fico pelo ID.
    """
    result = storage.get_result(result_id)
    
    if not result:
        raise HTTPException(
            status_code=404,
            detail=f"Resultado n√£o encontrado: {result_id}"
        )
    
    return result


@app.get("/results")
def list_results(limit: int = 100):
    """
    Lista os √∫ltimos resultados salvos.
    """
    results = storage.list_results(limit=limit)
    return {"results": results, "count": len(results)}


@app.delete("/results/{result_id}")
def delete_result(result_id: str):
    """
    Deleta um resultado espec√≠fico pelo ID.
    """
    success = storage.delete_result(result_id)
    
    if not success:
        raise HTTPException(
            status_code=404,
            detail=f"Resultado n√£o encontrado: {result_id}"
        )
    
    return {"message": f"Resultado {result_id} deletado com sucesso"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
